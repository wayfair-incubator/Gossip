{
  "api/Gossip.Configuration.CredentialsConfiguration.html": {
    "href": "api/Gossip.Configuration.CredentialsConfiguration.html",
    "title": "Class CredentialsConfiguration | Gossip",
    "keywords": "Class CredentialsConfiguration Credentials Configuration Inheritance Object CredentialsConfiguration Namespace : Gossip.Configuration Assembly : Gossip.dll Syntax public class CredentialsConfiguration : object Constructors | Improve this Doc View Source CredentialsConfiguration() Credentials Configuration Constructor Declaration public CredentialsConfiguration() | Improve this Doc View Source CredentialsConfiguration(String, String) Credentials Configuration Constructor Declaration public CredentialsConfiguration(string username, string password) Parameters Type Name Description String username Username for database connection String password Password for database connection Properties | Improve this Doc View Source Password Database connection password Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Username Database connection username Declaration public string Username { get; set; } Property Value Type Description String"
  },
  "api/Gossip.Configuration.DatabaseMonitoring.html": {
    "href": "api/Gossip.Configuration.DatabaseMonitoring.html",
    "title": "Class DatabaseMonitoring | Gossip",
    "keywords": "Class DatabaseMonitoring Configuration for monitoring the databases. Inheritance Object DatabaseMonitoring Implements IDatabaseMonitoring Namespace : Gossip.Configuration Assembly : Gossip.dll Syntax public class DatabaseMonitoring : object, IDatabaseMonitoring Constructors | Improve this Doc View Source DatabaseMonitoring() Initialize a new DatabaseMonitoring instance. Declaration public DatabaseMonitoring() Properties | Improve this Doc View Source CancellationToken Cancellation token Declaration public CancellationToken CancellationToken { get; set; } Property Value Type Description CancellationToken | Improve this Doc View Source Interval How frequently to run the monitor Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IsEnabled Whether the monitoring is active Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean Implements IDatabaseMonitoring"
  },
  "api/Gossip.Configuration.html": {
    "href": "api/Gossip.Configuration.html",
    "title": "Namespace Gossip.Configuration | Gossip",
    "keywords": "Namespace Gossip.Configuration Classes CredentialsConfiguration Credentials Configuration DatabaseMonitoring Configuration for monitoring the databases. Interfaces IDatabaseMonitoring Configuration for monitoring the databases."
  },
  "api/Gossip.Configuration.IDatabaseMonitoring.html": {
    "href": "api/Gossip.Configuration.IDatabaseMonitoring.html",
    "title": "Interface IDatabaseMonitoring | Gossip",
    "keywords": "Interface IDatabaseMonitoring Configuration for monitoring the databases. Namespace : Gossip.Configuration Assembly : Gossip.dll Syntax public interface IDatabaseMonitoring Properties | Improve this Doc View Source CancellationToken Cancellation token Declaration CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken | Improve this Doc View Source Interval How frequently to run the monitor Declaration TimeSpan Interval { get; } Property Value Type Description TimeSpan | Improve this Doc View Source IsEnabled Whether the monitoring is active Declaration bool IsEnabled { get; } Property Value Type Description Boolean"
  },
  "api/Gossip.Connection.ConnectionString.html": {
    "href": "api/Gossip.Connection.ConnectionString.html",
    "title": "Class ConnectionString | Gossip",
    "keywords": "Class ConnectionString Database connection string Inheritance Object ConnectionString Implements IConnectionString IConnectionDetails Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class ConnectionString : object, IConnectionString, IConnectionDetails Properties | Improve this Doc View Source Credentials Declaration public SqlCredential Credentials { get; set; } Property Value Type Description SqlCredential | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source Server Declaration public string Server { get; set; } Property Value Type Description String | Improve this Doc View Source Value Declaration public string Value { get; set; } Property Value Type Description String Implements IConnectionString IConnectionDetails"
  },
  "api/Gossip.Connection.Database.html": {
    "href": "api/Gossip.Connection.Database.html",
    "title": "Class Database | Gossip",
    "keywords": "Class Database Configures a database connection Inheritance Object Database Implements IDatabaseConfigurator Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class Database : object, IDatabaseConfigurator Methods | Improve this Doc View Source Build() Builds the database connection Declaration public IDatabaseConnectionProvider Build() Returns Type Description IDatabaseConnectionProvider IDatabaseConfigurator | Improve this Doc View Source Configure<T>() Configures a database configuration Declaration public static IDatabaseConfigurator Configure<T>() where T : ISqlConnectionFactory, new() Returns Type Description IDatabaseConfigurator IDatabaseConfigurator Type Parameters Name Description T | Improve this Doc View Source Configure<T>(T) Creates database configuration Declaration public static IDatabaseConfigurator Configure<T>(T instance) where T : ISqlConnectionFactory Parameters Type Name Description T instance SQL Connection Returns Type Description IDatabaseConfigurator IDatabaseConfigurator Type Parameters Name Description T | Improve this Doc View Source WithCommandTimeout(Int32) Time in ms that the connection will wait for a command to execute Declaration public IDatabaseConfigurator WithCommandTimeout(int timeoutInSeconds) Parameters Type Name Description Int32 timeoutInSeconds Timeout (in seconds) Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithConnectionString(Func<IConnectionString>) Adds a connection string to the database connection Declaration public IDatabaseConfigurator WithConnectionString(Func<IConnectionString> connectionString) Parameters Type Name Description Func < IConnectionString > connectionString Database connection string Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithConnectionString(Func<Task<IConnectionString>>) Builds a connection string to configure a database connection Declaration public IDatabaseConfigurator WithConnectionString(Func<Task<IConnectionString>> connectionString) Parameters Type Name Description Func < Task < IConnectionString >> connectionString Database Connection String Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithExecutionStrategy(IExecutionStrategy) Adds an execution strategy to the database connection Declaration public IDatabaseConfigurator WithExecutionStrategy(IExecutionStrategy executionStrategy) Parameters Type Name Description IExecutionStrategy executionStrategy Execution strategy Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithFallbacks(IEnumerable<Func<Task<IConnectionString>>>) Adds fallbacks to the database connection Declaration public IDatabaseConfigurator WithFallbacks(IEnumerable<Func<Task<IConnectionString>>> fallbacks) Parameters Type Name Description IEnumerable < Func < Task < IConnectionString >>> fallbacks Connection fallbacks Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithMonitoring(TimeSpan, CancellationToken) Get insight into the state of the library. See what databases are in line to be used. Declaration public IDatabaseConfigurator WithMonitoring(TimeSpan interval, CancellationToken cancellationToken) Parameters Type Name Description TimeSpan interval The frequency for the monitor to run CancellationToken cancellationToken Cancellation token Returns Type Description IDatabaseConfigurator | Improve this Doc View Source WithPlugin<T>(Func<T>) Add a plugin by providing a factory that will be used to instantiate the plugin every call to the database. Declaration public IDatabaseConfigurator WithPlugin<T>(Func<T> pluginFactory) where T : IDatabasePlugin Parameters Type Name Description Func <T> pluginFactory The plugin to add. Returns Type Description IDatabaseConfigurator IDatabaseConfigurator Type Parameters Name Description T Implements IDatabaseConfigurator"
  },
  "api/Gossip.Connection.DatabaseConfiguration.html": {
    "href": "api/Gossip.Connection.DatabaseConfiguration.html",
    "title": "Class DatabaseConfiguration | Gossip",
    "keywords": "Class DatabaseConfiguration Database Configuration Inheritance Object DatabaseConfiguration Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class DatabaseConfiguration : object Constructors | Improve this Doc View Source DatabaseConfiguration(ISqlConnectionFactory) Database Configuration constructor Declaration public DatabaseConfiguration(ISqlConnectionFactory connectionFactory) Parameters Type Name Description ISqlConnectionFactory connectionFactory SQL connection factory Properties | Improve this Doc View Source CommandTimeoutInSeconds Timeout (in seconds) for sql command Declaration public int CommandTimeoutInSeconds { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ConnectionFactory SQL connection factory Declaration public ISqlConnectionFactory ConnectionFactory { get; set; } Property Value Type Description ISqlConnectionFactory | Improve this Doc View Source ConnectionStringFactories List of database connections Declaration public List<Func<Task<IConnectionString>>> ConnectionStringFactories { get; set; } Property Value Type Description List < Func < Task < IConnectionString >>> | Improve this Doc View Source ExecutionStrategy Database execution strategy Declaration public IExecutionStrategy ExecutionStrategy { get; set; } Property Value Type Description IExecutionStrategy | Improve this Doc View Source Monitoring Monitoring definition Declaration public IDatabaseMonitoring Monitoring { get; set; } Property Value Type Description IDatabaseMonitoring"
  },
  "api/Gossip.Connection.DatabaseConnection.html": {
    "href": "api/Gossip.Connection.DatabaseConnection.html",
    "title": "Class DatabaseConnection | Gossip",
    "keywords": "Class DatabaseConnection Database Connection Inheritance Object DatabaseConnection Implements IDatabaseConnection IDisposable Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class DatabaseConnection : object, IDatabaseConnection, IDisposable Constructors | Improve this Doc View Source DatabaseConnection(ISqlConnection, Int32, IQueryExecutorProvider, CancellationToken) Database Connection constructor Declaration public DatabaseConnection(ISqlConnection conn, int commandTimeout, IQueryExecutorProvider queryExecutorProvider, CancellationToken cancellationToken) Parameters Type Name Description ISqlConnection conn Database connection Int32 commandTimeout Database Command Timeout IQueryExecutorProvider queryExecutorProvider Query executor CancellationToken cancellationToken Cancellation token Methods | Improve this Doc View Source BeginTransaction() Declaration public ITransaction BeginTransaction() Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel) Declaration public ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel, String) Declaration public ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel, string transactionName) Parameters Type Name Description System.Data.IsolationLevel isolationLevel String transactionName Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(String) Declaration public ITransaction BeginTransaction(string transactionName) Parameters Type Name Description String transactionName Returns Type Description ITransaction | Improve this Doc View Source Configure(String, String) Configures the database Declaration public IQueryConfigurator Configure(string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description IQueryConfigurator IQueryConfigurator | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source EnlistTransaction(Transaction) Enlist a transaction Declaration public void EnlistTransaction(Transaction transaction) Parameters Type Name Description Transaction transaction transaction | Improve this Doc View Source Execute(String, Object, String, String) Execute parameterized SQL. Declaration public int Execute(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Int32 The number of rows affected. | Improve this Doc View Source ExecuteAsync(String, Object, String, String) Execute parameterized SQL. Declaration public Task<int> ExecuteAsync(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql SQL query to run Object param Parameters to pass into the SQL query String callerMemberName Caller name String callerFilePath Caller location Returns Type Description Task < Int32 > Integer number of rows affected | Improve this Doc View Source Query<T>(String, Object, String, String) Execute parameterized sql Declaration public IEnumerable<T> Query<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description IEnumerable <T> Result of the sql query, a collection of type T Type Parameters Name Description T generic type | Improve this Doc View Source QueryAsync<T>(String, Object, String, String) Execute parameterized SQL. Declaration public Task<IEnumerable<T>> QueryAsync<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql SQL query to run Object param Parameters to pass into the SQL query String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task < IEnumerable <T>> SQL query result Type Parameters Name Description T Generic return type | Improve this Doc View Source QueryFirstOrDefaultAsync<T>(String, Object, String, String) Executes Parameterized SQL Declaration public Task<T> QueryFirstOrDefaultAsync<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task <T> The first result of the sql query Type Parameters Name Description T Generic Type | Improve this Doc View Source QuerySingleOrDefault<T>(String, String, String) Executes SQL Declaration public T QuerySingleOrDefault<T>(string sql, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description T The first result of the sql query Type Parameters Name Description T Generic Type | Improve this Doc View Source QuerySingleOrDefaultAsync<T>(String, String, String) Execute sql Declaration public Task<T> QuerySingleOrDefaultAsync<T>(string sql, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task <T> Result of the sql query, a collection of type T Type Parameters Name Description T generic type Implements IDatabaseConnection IDisposable"
  },
  "api/Gossip.Connection.DatabaseConnectionProvider.html": {
    "href": "api/Gossip.Connection.DatabaseConnectionProvider.html",
    "title": "Class DatabaseConnectionProvider | Gossip",
    "keywords": "Class DatabaseConnectionProvider Opens a connection to a database Inheritance Object DatabaseConnectionProvider Implements IDatabaseConnectionProvider Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class DatabaseConnectionProvider : object, IDatabaseConnectionProvider Methods | Improve this Doc View Source OpenAsync() Opens an async connection to a database. Declaration public Task<IDatabaseConnection> OpenAsync() Returns Type Description Task < IDatabaseConnection > IDatabaseConnection | Improve this Doc View Source OpenAsync(CancellationToken) Opens an async connection to a database. Declaration public Task<IDatabaseConnection> OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task < IDatabaseConnection > IDatabaseConnection Implements IDatabaseConnectionProvider"
  },
  "api/Gossip.Connection.Exceptions.DatabaseConnectionException.html": {
    "href": "api/Gossip.Connection.Exceptions.DatabaseConnectionException.html",
    "title": "Class DatabaseConnectionException | Gossip",
    "keywords": "Class DatabaseConnectionException Inheritance Object DatabaseConnectionException Namespace : Gossip.Connection.Exceptions Assembly : Gossip.dll Syntax public class DatabaseConnectionException : Exception Constructors | Improve this Doc View Source DatabaseConnectionException(String) Declaration public DatabaseConnectionException(string message) Parameters Type Name Description String message | Improve this Doc View Source DatabaseConnectionException(String, Exception) Declaration public DatabaseConnectionException(string message, Exception exception) Parameters Type Name Description String message Exception exception"
  },
  "api/Gossip.Connection.Exceptions.DatabaseResolutionException.html": {
    "href": "api/Gossip.Connection.Exceptions.DatabaseResolutionException.html",
    "title": "Class DatabaseResolutionException | Gossip",
    "keywords": "Class DatabaseResolutionException Inheritance Object DatabaseResolutionException Namespace : Gossip.Connection.Exceptions Assembly : Gossip.dll Syntax public class DatabaseResolutionException : Exception Constructors | Improve this Doc View Source DatabaseResolutionException(String) Declaration public DatabaseResolutionException(string message) Parameters Type Name Description String message Properties | Improve this Doc View Source Database Declaration public string Database { get; set; } Property Value Type Description String"
  },
  "api/Gossip.Connection.Exceptions.html": {
    "href": "api/Gossip.Connection.Exceptions.html",
    "title": "Namespace Gossip.Connection.Exceptions | Gossip",
    "keywords": "Namespace Gossip.Connection.Exceptions Classes DatabaseConnectionException DatabaseResolutionException"
  },
  "api/Gossip.Connection.Factories.html": {
    "href": "api/Gossip.Connection.Factories.html",
    "title": "Namespace Gossip.Connection.Factories | Gossip",
    "keywords": "Namespace Gossip.Connection.Factories Classes MsSql Creates connection to MsSQL databases"
  },
  "api/Gossip.Connection.Factories.MsSql.html": {
    "href": "api/Gossip.Connection.Factories.MsSql.html",
    "title": "Class MsSql | Gossip",
    "keywords": "Class MsSql Creates connection to MsSQL databases Inheritance Object MsSql Implements ISqlConnectionFactory Namespace : Gossip.Connection.Factories Assembly : Gossip.dll Syntax public class MsSql : object, ISqlConnectionFactory Methods | Improve this Doc View Source Create(IConnectionString) Create a database connection for a sql database Declaration public ISqlConnection Create(IConnectionString connectionString) Parameters Type Name Description IConnectionString connectionString Connection string Returns Type Description ISqlConnection Database connection | Improve this Doc View Source GetConnectionStringBuilder() Gets a connection string builder Declaration public IConnectionStringBuilder GetConnectionStringBuilder() Returns Type Description IConnectionStringBuilder Connection string builder Implements ISqlConnectionFactory"
  },
  "api/Gossip.Connection.Fluent.BulkInsertConfigurator-1.html": {
    "href": "api/Gossip.Connection.Fluent.BulkInsertConfigurator-1.html",
    "title": "Class BulkInsertConfigurator<T> | Gossip",
    "keywords": "Class BulkInsertConfigurator<T> Configures bulk insert operations to execute. Inheritance Object BulkInsertConfigurator<T> Implements IBulkInsertConfigurator <T> Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class BulkInsertConfigurator<T> : object, IBulkInsertConfigurator<T> Type Parameters Name Description T The type of data being bulk inserted. Constructors | Improve this Doc View Source BulkInsertConfigurator(IBulkQueryExecutor, IEnumerable<T>) Constructs a BulkInsertConfigurator<T> . Declaration public BulkInsertConfigurator(IBulkQueryExecutor queryExecutor, IEnumerable<T> data) Parameters Type Name Description IBulkQueryExecutor queryExecutor The query executor, used to execute the configured bulk insert operation. IEnumerable <T> data The data to insert. Methods | Improve this Doc View Source ExecuteAsync() Declaration public Task ExecuteAsync() Returns Type Description Task | Improve this Doc View Source IntoTable(String) Declaration public IBulkInsertConfigurator<T> IntoTable(string tableName) Parameters Type Name Description String tableName Returns Type Description IBulkInsertConfigurator <T> | Improve this Doc View Source WithColumnMapping(Dictionary<String, String>) Declaration public IBulkInsertConfigurator<T> WithColumnMapping(Dictionary<string, string> columnMappings) Parameters Type Name Description Dictionary < String , String > columnMappings Returns Type Description IBulkInsertConfigurator <T> | Improve this Doc View Source WithTimeout(Int32) Declaration public IBulkInsertConfigurator<T> WithTimeout(int timeoutInSeconds) Parameters Type Name Description Int32 timeoutInSeconds Returns Type Description IBulkInsertConfigurator <T> Implements IBulkInsertConfigurator<T>"
  },
  "api/Gossip.Connection.Fluent.ExecutionDetails.html": {
    "href": "api/Gossip.Connection.Fluent.ExecutionDetails.html",
    "title": "Class ExecutionDetails | Gossip",
    "keywords": "Class ExecutionDetails Provides execution details about the query. Inheritance Object ExecutionDetails Implements IExecutionDetails Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class ExecutionDetails : object, IExecutionDetails Constructors | Improve this Doc View Source ExecutionDetails(TimeSpan) Declaration public ExecutionDetails(TimeSpan duration) Parameters Type Name Description TimeSpan duration Properties | Improve this Doc View Source Duration Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Implements IExecutionDetails"
  },
  "api/Gossip.Connection.Fluent.FunctionMetadata.html": {
    "href": "api/Gossip.Connection.Fluent.FunctionMetadata.html",
    "title": "Class FunctionMetadata | Gossip",
    "keywords": "Class FunctionMetadata Represents metadata about a given function call. Inheritance Object FunctionMetadata Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class FunctionMetadata : object Properties | Improve this Doc View Source CallerFilePath The caller file path. Declaration public string CallerFilePath { get; set; } Property Value Type Description String | Improve this Doc View Source CallerMemberName The caller member name. Declaration public string CallerMemberName { get; set; } Property Value Type Description String"
  },
  "api/Gossip.Connection.Fluent.html": {
    "href": "api/Gossip.Connection.Fluent.html",
    "title": "Namespace Gossip.Connection.Fluent | Gossip",
    "keywords": "Namespace Gossip.Connection.Fluent Classes BulkInsertConfigurator<T> Configures bulk insert operations to execute. ExecutionDetails Provides execution details about the query. FunctionMetadata Represents metadata about a given function call. PartitionedQueryConfigurator<T> Configures partitions to be executed upon for batch operations. QueryConfiguration QueryConfigurator Fluent interface for configuring queries. QueryExecutor Executes configured queries. QueryExecutorProvider Provides various query executors. Interfaces IBulkInsertConfigurator<T> Configures bulk insert operations to execute. IBulkQueryExecutor Executes a bulk insert operation. IExecutionDetails Provides execution details about the query. IPartitionConfigurator<T> Configures partitions to be executed upon for batch operations. IQueryConfigurator Fluent interface for configuring queries. IQueryExecutor Executes configured queries. IQueryExecutorProvider Provides various query executors. ISqlConnection Represents a SQL connection. IUpdatableQueryExecutor Provides a method updating an existing QueryConfiguration for a IQueryExecutor ."
  },
  "api/Gossip.Connection.Fluent.IBulkInsertConfigurator-1.html": {
    "href": "api/Gossip.Connection.Fluent.IBulkInsertConfigurator-1.html",
    "title": "Interface IBulkInsertConfigurator<T> | Gossip",
    "keywords": "Interface IBulkInsertConfigurator<T> Configures bulk insert operations to execute. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IBulkInsertConfigurator<T> Type Parameters Name Description T The type of data being bulk inserted. Methods | Improve this Doc View Source ExecuteAsync() Execute the configured bulk insert operation. Declaration Task ExecuteAsync() Returns Type Description Task | Improve this Doc View Source IntoTable(String) Configure which table to perform a bulk insert into. Declaration IBulkInsertConfigurator<T> IntoTable(string tableName) Parameters Type Name Description String tableName The name of the table. Returns Type Description IBulkInsertConfigurator <T> | Improve this Doc View Source WithColumnMapping(Dictionary<String, String>) Configure the column mappings for the bulk insert operation. Declaration IBulkInsertConfigurator<T> WithColumnMapping(Dictionary<string, string> columnMappings) Parameters Type Name Description Dictionary < String , String > columnMappings A dictionary of column mappings. Returns Type Description IBulkInsertConfigurator <T> | Improve this Doc View Source WithTimeout(Int32) Configure a timeout for the bulk insert operation. Declaration IBulkInsertConfigurator<T> WithTimeout(int timeoutInSeconds) Parameters Type Name Description Int32 timeoutInSeconds The timeout, specified in seconds. Returns Type Description IBulkInsertConfigurator <T>"
  },
  "api/Gossip.Connection.Fluent.IBulkQueryExecutor.html": {
    "href": "api/Gossip.Connection.Fluent.IBulkQueryExecutor.html",
    "title": "Interface IBulkQueryExecutor | Gossip",
    "keywords": "Interface IBulkQueryExecutor Executes a bulk insert operation. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IBulkQueryExecutor Methods | Improve this Doc View Source InsertInBulkAsync<T>(IEnumerable<T>, String, Int32, Dictionary<String, String>) Execute a bulk insert operation into the specified table. Declaration Task InsertInBulkAsync<T>(IEnumerable<T> data, string tableName, int timeoutInSeconds, Dictionary<string, string> columnMappings) Parameters Type Name Description IEnumerable <T> data The data to bulk insert. String tableName The name of the table. Int32 timeoutInSeconds The timeout, specified in seconds. Dictionary < String , String > columnMappings A dictionary of column mappings. Returns Type Description Task Type Parameters Name Description T The type of data being bulk inserted."
  },
  "api/Gossip.Connection.Fluent.IExecutionDetails.html": {
    "href": "api/Gossip.Connection.Fluent.IExecutionDetails.html",
    "title": "Interface IExecutionDetails | Gossip",
    "keywords": "Interface IExecutionDetails Provides execution details about the query. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IExecutionDetails Properties | Improve this Doc View Source Duration The duration of the query. Declaration TimeSpan Duration { get; } Property Value Type Description TimeSpan"
  },
  "api/Gossip.Connection.Fluent.IPartitionConfigurator-1.html": {
    "href": "api/Gossip.Connection.Fluent.IPartitionConfigurator-1.html",
    "title": "Interface IPartitionConfigurator<T> | Gossip",
    "keywords": "Interface IPartitionConfigurator<T> Configures partitions to be executed upon for batch operations. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IPartitionConfigurator<out T> Type Parameters Name Description T The batch parameter data type. Methods | Improve this Doc View Source Execute() Execute synchronously the configured batched operation. Declaration IEnumerable<int> Execute() Returns Type Description IEnumerable < Int32 > An of row counts effected in each batch. | Improve this Doc View Source ExecuteAsync() Execute asynchronously the configured batched operation. Declaration Task<IEnumerable<int>> ExecuteAsync() Returns Type Description Task < IEnumerable < Int32 >> An of row counts effected in each batch. | Improve this Doc View Source Query<TResult>() Query synchronously for the results of the configured batch operation. Declaration IEnumerable<TResult> Query<TResult>() Returns Type Description IEnumerable <TResult> An of . Type Parameters Name Description TResult | Improve this Doc View Source QueryAsync<TResult>() Query asynchronously for the results of the configured batch operation. Declaration Task<IEnumerable<TResult>> QueryAsync<TResult>() Returns Type Description Task < IEnumerable <TResult>> An of . Type Parameters Name Description TResult The data type of the expected result. | Improve this Doc View Source WithBatchParam(Func<IEnumerable<T>, Object>) Convert batched objects to sql parameter @batchParam. Declaration IPartitionConfigurator<T> WithBatchParam(Func<IEnumerable<T>, object> func) Parameters Type Name Description Func < IEnumerable <T>, Object > func A batch of the objects to be batched. Function should return sql that replaces @batchParam. Returns Type Description IPartitionConfigurator <T> | Improve this Doc View Source WithBatchParamAsJsonArray() The parameter to configure batched queries from. Declaration IPartitionConfigurator<T> WithBatchParamAsJsonArray() Returns Type Description IPartitionConfigurator <T> | Improve this Doc View Source WithBatchSize(Int32) Configure the batch size for the operation. Declaration IPartitionConfigurator<T> WithBatchSize(int batchSize = 10000) Parameters Type Name Description Int32 batchSize The batch size to use for the operation. Returns Type Description IPartitionConfigurator <T>"
  },
  "api/Gossip.Connection.Fluent.IQueryConfigurator.html": {
    "href": "api/Gossip.Connection.Fluent.IQueryConfigurator.html",
    "title": "Interface IQueryConfigurator | Gossip",
    "keywords": "Interface IQueryConfigurator Fluent interface for configuring queries. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IQueryConfigurator Methods | Improve this Doc View Source Build() Build a IQueryExecutor from the configured query. Declaration IQueryExecutor Build() Returns Type Description IQueryExecutor A configured IQueryExecutor . | Improve this Doc View Source BulkInsert<T>(IEnumerable<T>) Build a IBulkInsertConfigurator<T> from the configured query. Declaration IBulkInsertConfigurator<T> BulkInsert<T>(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data The data to bulk insert. Returns Type Description IBulkInsertConfigurator <T> A configured IBulkInsertConfigurator<T> Type Parameters Name Description T The type of data to bulk insert. | Improve this Doc View Source Unbuffered() Configure the query to execute unbuffered. If you use this, you must enumerate the results before closing the connection. Declaration IQueryConfigurator Unbuffered() Returns Type Description IQueryConfigurator | Improve this Doc View Source WithCancellationToken(CancellationToken) Provide a cancellation token to cooperatively handle task cancellation. Declaration IQueryConfigurator WithCancellationToken(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description IQueryConfigurator | Improve this Doc View Source WithParameters(Object) Configure the parameters for the query. Declaration IQueryConfigurator WithParameters(object parameters) Parameters Type Name Description Object parameters The parameters to use with the query. Returns Type Description IQueryConfigurator | Improve this Doc View Source WithQuery(String) Configure the query. Declaration IQueryConfigurator WithQuery(string query) Parameters Type Name Description String query The SQL query to execute. Returns Type Description IQueryConfigurator | Improve this Doc View Source WithTimeoutInSeconds(Int32) Specify a query timeout in seconds. Declaration IQueryConfigurator WithTimeoutInSeconds(int timeout) Parameters Type Name Description Int32 timeout The query timeout, in seconds. Returns Type Description IQueryConfigurator"
  },
  "api/Gossip.Connection.Fluent.IQueryExecutor.html": {
    "href": "api/Gossip.Connection.Fluent.IQueryExecutor.html",
    "title": "Interface IQueryExecutor | Gossip",
    "keywords": "Interface IQueryExecutor Executes configured queries. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IQueryExecutor Methods | Improve this Doc View Source BatchedBy<T>(IEnumerable<T>) Perform the query partitioned into batches on the partitionedBy parameter. Declaration IPartitionConfigurator<T> BatchedBy<T>(IEnumerable<T> partitionedBy) Parameters Type Name Description IEnumerable <T> partitionedBy The data to perform partitioned batch queries on. Returns Type Description IPartitionConfigurator <T> Type Parameters Name Description T The type of data to perform partitioned batch queries on. | Improve this Doc View Source Execute() Synchronously execute the query. Declaration int Execute() Returns Type Description Int32 The number of rows impacted by the query. | Improve this Doc View Source ExecuteAsync() Asynchronously execute the query. Declaration Task<int> ExecuteAsync() Returns Type Description Task < Int32 > The number of rows impacted by the query. | Improve this Doc View Source ExecuteScalar<T>() Synchronously execute the query and return a single value. Declaration T ExecuteScalar<T>() Returns Type Description T A single result. Type Parameters Name Description T The type of data to return. | Improve this Doc View Source ExecuteScalarAsync<T>() Asynchronously execute the query and return a single value. Declaration Task<T> ExecuteScalarAsync<T>() Returns Type Description Task <T> A single result. Type Parameters Name Description T The type of data to return. | Improve this Doc View Source Query<T>() Synchronously execute the query and return the results. Declaration IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> The of results. Type Parameters Name Description T The data type of the returned values. | Improve this Doc View Source QueryAsync<T>() Asynchronously execute the query and return the results. Declaration Task<IEnumerable<T>> QueryAsync<T>() Returns Type Description Task < IEnumerable <T>> The of results. Type Parameters Name Description T The data type of the returned values. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn>) Perform an asynchronous multi-mapping query with 2 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TReturn> mapping The function to map row types to the return type. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn>) Perform an asynchronous multi-mapping query with 3 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TReturn> mapping The function to map row types to the return type Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn>) Perform an asynchronous multi-mapping query with 4 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TReturn> mapping The function to map row types to the return type. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>) Perform an asynchronous multi-mapping query with 5 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping The function to map row types to the return type. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>) Perform an asynchronous multi-mapping query with 6 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping The function to map row types to the return type. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>) Perform an asynchronous multi-mapping query with 7 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping The function to map row types to the return type. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TSeventh The seventh type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryFirstOrDefault<T>() Synchronously query for the first result, or the default value of if no result is found. Declaration T QueryFirstOrDefault<T>() Returns Type Description T The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The data type of the returned value. | Improve this Doc View Source QueryFirstOrDefaultAsync<T>() Asynchronously query for the first result, or the default value of if no result is found. Declaration Task<T> QueryFirstOrDefaultAsync<T>() Returns Type Description Task <T> The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The data type of the returned value. | Improve this Doc View Source QuerySingleOrDefault<T>() Synchronously query for a single result, or the default value of if no result is found. Declaration T QuerySingleOrDefault<T>() Returns Type Description T The result of the query, or the default value of if no result is found. Type Parameters Name Description T The data type of the returned value. | Improve this Doc View Source QuerySingleOrDefaultAsync<T>() Asynchronously query for a single result, or the default value of if no result is found. Declaration Task<T> QuerySingleOrDefaultAsync<T>() Returns Type Description Task <T> The result of the query, or the default value of if no result is found. Type Parameters Name Description T The data type of the returned value."
  },
  "api/Gossip.Connection.Fluent.IQueryExecutorProvider.html": {
    "href": "api/Gossip.Connection.Fluent.IQueryExecutorProvider.html",
    "title": "Interface IQueryExecutorProvider | Gossip",
    "keywords": "Interface IQueryExecutorProvider Provides various query executors. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IQueryExecutorProvider Methods | Improve this Doc View Source GetBulkQueryExecutor(ISqlConnection, QueryConfiguration, FunctionMetadata) Get an IBulkQueryExecutor from the given connection, query configuration, and metadata. Declaration IBulkQueryExecutor GetBulkQueryExecutor(ISqlConnection conn, QueryConfiguration config, FunctionMetadata metadata) Parameters Type Name Description ISqlConnection conn The SQL connection. QueryConfiguration config The query configuration. FunctionMetadata metadata The metadata. Returns Type Description IBulkQueryExecutor An IBulkQueryExecutor . | Improve this Doc View Source GetQueryExecutor(ISqlConnection, QueryConfiguration, FunctionMetadata) Get an IQueryExecutor from the given connection, query configuration, and metadata. Declaration IQueryExecutor GetQueryExecutor(ISqlConnection conn, QueryConfiguration config, FunctionMetadata metadata) Parameters Type Name Description ISqlConnection conn The SQL connection. QueryConfiguration config The query configuration. FunctionMetadata metadata The metadata. Returns Type Description IQueryExecutor An IQueryExecutor ."
  },
  "api/Gossip.Connection.Fluent.ISqlConnection.html": {
    "href": "api/Gossip.Connection.Fluent.ISqlConnection.html",
    "title": "Interface ISqlConnection | Gossip",
    "keywords": "Interface ISqlConnection Represents a SQL connection. Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface ISqlConnection : IDisposable Methods | Improve this Doc View Source BeginTransaction() Begin a transaction. Declaration ITransaction BeginTransaction() Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel) Begin a transaction with a specified . Declaration ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The of the transaction. Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel, String) Begin a named transaction with a specified . Declaration ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel, string transactionName) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The of the transaction. String transactionName The transaction name. Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(String) Begin a named transaction. Declaration ITransaction BeginTransaction(string transactionName) Parameters Type Name Description String transactionName The transaction name. Returns Type Description ITransaction | Improve this Doc View Source BulkInsertAsync<T>(String, IEnumerable<T>, Int32, Action<Object, SqlRowsCopiedEventArgs>, Int32, Dictionary<String, String>, Int32) Bulk insert data into a table. Declaration Task BulkInsertAsync<T>(string insertIntoTable, IEnumerable<T> data, int batchSize = 1000, Action<object, SqlRowsCopiedEventArgs> notifyCallback = null, int notifyAfter = 10000, Dictionary<string, string> columnMapping = null, int timeoutSeconds = 30) Parameters Type Name Description String insertIntoTable The name of the table. IEnumerable <T> data The data to insert. Int32 batchSize The size of the batches for bulk insert. Action < Object , SqlRowsCopiedEventArgs > notifyCallback A callback to pass to . Int32 notifyAfter Occurs after each batch has been processed. Dictionary < String , String > columnMapping A dictionary of column mappings. Int32 timeoutSeconds The timeout, specified in seconds. Returns Type Description Task Type Parameters Name Description T The type of data being bulk inserted. | Improve this Doc View Source Close() Synchronously close the SQL connection. Declaration void Close() | Improve this Doc View Source EnlistTransaction(Transaction) Enlist the given transaction. Declaration void EnlistTransaction(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to enlist. | Improve this Doc View Source Execute(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously execute the query. Declaration int Execute(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. IDbTransaction transaction The transaction to use for this query. Returns Type Description Int32 The number of rows impacted by the query. | Improve this Doc View Source ExecuteAsync(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously execute the query. Declaration Task<int> ExecuteAsync(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < Int32 > The number of rows impacted by the query. | Improve this Doc View Source ExecuteScalar<T>(String, Object, Int32, IDbTransaction) Synchronously execute the query and return a single value. Declaration T ExecuteScalar<T>(string query, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description T A single result. Type Parameters Name Description T The type of data to return. | Improve this Doc View Source ExecuteScalarAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously execute the query and return a single value. Declaration Task<T> ExecuteScalarAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task <T> A single result. Type Parameters Name Description T The type of data to return. | Improve this Doc View Source GetConnectionDetails() Get the connection details such as the server and database name. Declaration IConnectionDetails GetConnectionDetails() Returns Type Description IConnectionDetails The IConnectionDetails . | Improve this Doc View Source Open() Synchronously open the SQL connection. Declaration void Open() | Improve this Doc View Source OpenAsync(CancellationToken) Asynchronously open the SQL connection. Declaration Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. Returns Type Description Task | Improve this Doc View Source Query<T>(String, Object, Int32, Boolean, IDbTransaction) Synchronously execute the query and return the results. Declaration IEnumerable<T> Query<T>(string query, object parameters, int commandTimeout, bool buffered, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. Boolean buffered Whether to buffer the results in memory or not. IDbTransaction transaction An for transactional functionality. Returns Type Description IEnumerable <T> The of results. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously execute the query and return the results. Declaration Task<IEnumerable<T>> QueryAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task < IEnumerable <T>> The of results. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TReturn>(String, Func<TFirst, TSecond, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 2 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(string query, Func<TFirst, TSecond, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TReturn>(String, Func<TFirst, TSecond, TThird, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 3 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(string query, Func<TFirst, TSecond, TThird, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 4 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 5 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 6 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 7 input types. This returns a single type, combined from the raw types via mapping . Declaration Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TSeventh The seventh type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryFirstOrDefault<T>(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously query for the first result, or the default value of if no result is found. Declaration T QueryFirstOrDefault<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description T The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryFirstOrDefaultAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously query for the first result, or the default value of if no result is found. Declaration Task<T> QueryFirstOrDefaultAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task <T> The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QuerySingleOrDefault<T>(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously query for a single result, or the default value of if no result is found. Declaration T QuerySingleOrDefault<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description T The result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QuerySingleOrDefaultAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously query for a single result, or the default value of if no result is found. Declaration Task<T> QuerySingleOrDefaultAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task <T> The result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return."
  },
  "api/Gossip.Connection.Fluent.IUpdatableQueryExecutor.html": {
    "href": "api/Gossip.Connection.Fluent.IUpdatableQueryExecutor.html",
    "title": "Interface IUpdatableQueryExecutor | Gossip",
    "keywords": "Interface IUpdatableQueryExecutor Provides a method updating an existing QueryConfiguration for a IQueryExecutor . Inherited Members IQueryExecutor.QueryFirstOrDefault<T>() IQueryExecutor.QueryFirstOrDefaultAsync<T>() IQueryExecutor.QuerySingleOrDefault<T>() IQueryExecutor.QuerySingleOrDefaultAsync<T>() IQueryExecutor.Query<T>() IQueryExecutor.QueryAsync<T>() IQueryExecutor.QueryAsync<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn>) IQueryExecutor.QueryAsync<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn>) IQueryExecutor.QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn>) IQueryExecutor.QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>) IQueryExecutor.QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>) IQueryExecutor.QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>) IQueryExecutor.BatchedBy<T>(IEnumerable<T>) IQueryExecutor.ExecuteAsync() IQueryExecutor.ExecuteScalar<T>() IQueryExecutor.ExecuteScalarAsync<T>() IQueryExecutor.Execute() Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public interface IUpdatableQueryExecutor : IQueryExecutor Methods | Improve this Doc View Source UpdateConfig(QueryConfiguration) Update the existing QueryConfiguration on the IQueryExecutor . Declaration void UpdateConfig(QueryConfiguration config) Parameters Type Name Description QueryConfiguration config The new QueryConfiguration to use."
  },
  "api/Gossip.Connection.Fluent.PartitionedQueryConfigurator-1.html": {
    "href": "api/Gossip.Connection.Fluent.PartitionedQueryConfigurator-1.html",
    "title": "Class PartitionedQueryConfigurator<T> | Gossip",
    "keywords": "Class PartitionedQueryConfigurator<T> Configures partitions to be executed upon for batch operations. Inheritance Object PartitionedQueryConfigurator<T> Implements IPartitionConfigurator <T> Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class PartitionedQueryConfigurator<T> : object, IPartitionConfigurator<T> Type Parameters Name Description T The batch parameter data type. Constructors | Improve this Doc View Source PartitionedQueryConfigurator(IUpdatableQueryExecutor, QueryConfiguration, IEnumerable<T>) Declaration public PartitionedQueryConfigurator(IUpdatableQueryExecutor executor, QueryConfiguration config, IEnumerable<T> partitionedBy) Parameters Type Name Description IUpdatableQueryExecutor executor QueryConfiguration config IEnumerable <T> partitionedBy Methods | Improve this Doc View Source Execute() Declaration public IEnumerable<int> Execute() Returns Type Description IEnumerable < Int32 > | Improve this Doc View Source ExecuteAsync() Declaration public Task<IEnumerable<int>> ExecuteAsync() Returns Type Description Task < IEnumerable < Int32 >> | Improve this Doc View Source Query<TResult>() Declaration public IEnumerable<TResult> Query<TResult>() Returns Type Description IEnumerable <TResult> Type Parameters Name Description TResult | Improve this Doc View Source QueryAsync<TResult>() Declaration public Task<IEnumerable<TResult>> QueryAsync<TResult>() Returns Type Description Task < IEnumerable <TResult>> Type Parameters Name Description TResult | Improve this Doc View Source WithBatchParam(Func<IEnumerable<T>, Object>) Declaration public IPartitionConfigurator<T> WithBatchParam(Func<IEnumerable<T>, object> func) Parameters Type Name Description Func < IEnumerable <T>, Object > func Returns Type Description IPartitionConfigurator <T> | Improve this Doc View Source WithBatchParamAsJsonArray() Declaration public IPartitionConfigurator<T> WithBatchParamAsJsonArray() Returns Type Description IPartitionConfigurator <T> | Improve this Doc View Source WithBatchSize(Int32) Declaration public IPartitionConfigurator<T> WithBatchSize(int batchSize = 10000) Parameters Type Name Description Int32 batchSize Returns Type Description IPartitionConfigurator <T> Implements IPartitionConfigurator<T>"
  },
  "api/Gossip.Connection.Fluent.QueryConfiguration.html": {
    "href": "api/Gossip.Connection.Fluent.QueryConfiguration.html",
    "title": "Class QueryConfiguration | Gossip",
    "keywords": "Class QueryConfiguration Inheritance Object QueryConfiguration Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class QueryConfiguration : object Constructors | Improve this Doc View Source QueryConfiguration() Declaration public QueryConfiguration() Properties | Improve this Doc View Source CancellationToken Declaration public CancellationToken CancellationToken { get; set; } Property Value Type Description CancellationToken | Improve this Doc View Source Parameters Declaration public object Parameters { get; set; } Property Value Type Description Object | Improve this Doc View Source Query Declaration public string Query { get; set; } Property Value Type Description String | Improve this Doc View Source Timeout In seconds Declaration public int Timeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Transaction Declaration public ITransaction Transaction { get; set; } Property Value Type Description ITransaction | Improve this Doc View Source Unbuffered Whether to buffer the results in memory Declaration public bool Unbuffered { get; set; } Property Value Type Description Boolean Remarks This ACTUALLY only works for Query{T}() (not even QueryAsync) as Dapper only exposes it there"
  },
  "api/Gossip.Connection.Fluent.QueryConfigurator.html": {
    "href": "api/Gossip.Connection.Fluent.QueryConfigurator.html",
    "title": "Class QueryConfigurator | Gossip",
    "keywords": "Class QueryConfigurator Fluent interface for configuring queries. Inheritance Object QueryConfigurator Implements IQueryConfigurator Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class QueryConfigurator : object, IQueryConfigurator Constructors | Improve this Doc View Source QueryConfigurator(ISqlConnection, Int32, FunctionMetadata, IQueryExecutorProvider, ITransaction) Declaration public QueryConfigurator(ISqlConnection conn, int commandTimeout, FunctionMetadata metadata, IQueryExecutorProvider queryExecutorProvider, ITransaction transaction) Parameters Type Name Description ISqlConnection conn Int32 commandTimeout FunctionMetadata metadata IQueryExecutorProvider queryExecutorProvider ITransaction transaction Methods | Improve this Doc View Source Build() Declaration public IQueryExecutor Build() Returns Type Description IQueryExecutor | Improve this Doc View Source BulkInsert<T>(IEnumerable<T>) Declaration public IBulkInsertConfigurator<T> BulkInsert<T>(IEnumerable<T> data) Parameters Type Name Description IEnumerable <T> data Returns Type Description IBulkInsertConfigurator <T> Type Parameters Name Description T | Improve this Doc View Source Unbuffered() Declaration public IQueryConfigurator Unbuffered() Returns Type Description IQueryConfigurator | Improve this Doc View Source WithCancellationToken(CancellationToken) Declaration public IQueryConfigurator WithCancellationToken(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IQueryConfigurator | Improve this Doc View Source WithParameters(Object) Declaration public IQueryConfigurator WithParameters(object parameters) Parameters Type Name Description Object parameters Returns Type Description IQueryConfigurator | Improve this Doc View Source WithQuery(String) Declaration public IQueryConfigurator WithQuery(string query) Parameters Type Name Description String query Returns Type Description IQueryConfigurator | Improve this Doc View Source WithTimeoutInSeconds(Int32) Declaration public IQueryConfigurator WithTimeoutInSeconds(int timeout) Parameters Type Name Description Int32 timeout Returns Type Description IQueryConfigurator Implements IQueryConfigurator"
  },
  "api/Gossip.Connection.Fluent.QueryExecutor.html": {
    "href": "api/Gossip.Connection.Fluent.QueryExecutor.html",
    "title": "Class QueryExecutor | Gossip",
    "keywords": "Class QueryExecutor Executes configured queries. Inheritance Object QueryExecutor Implements IUpdatableQueryExecutor IQueryExecutor IBulkQueryExecutor Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class QueryExecutor : object, IUpdatableQueryExecutor, IQueryExecutor, IBulkQueryExecutor Constructors | Improve this Doc View Source QueryExecutor(ISqlConnection, QueryConfiguration, FunctionMetadata, IPluginManager, IExecutionStrategy) Declaration public QueryExecutor(ISqlConnection conn, QueryConfiguration config, FunctionMetadata metadata, IPluginManager pluginManager, IExecutionStrategy executionStrategy) Parameters Type Name Description ISqlConnection conn QueryConfiguration config FunctionMetadata metadata IPluginManager pluginManager IExecutionStrategy executionStrategy Methods | Improve this Doc View Source BatchedBy<T>(IEnumerable<T>) Declaration public IPartitionConfigurator<T> BatchedBy<T>(IEnumerable<T> partitionedBy) Parameters Type Name Description IEnumerable <T> partitionedBy Returns Type Description IPartitionConfigurator <T> Type Parameters Name Description T | Improve this Doc View Source Execute() Declaration public int Execute() Returns Type Description Int32 | Improve this Doc View Source ExecuteAsync() Declaration public Task<int> ExecuteAsync() Returns Type Description Task < Int32 > | Improve this Doc View Source ExecuteScalar<T>() Declaration public T ExecuteScalar<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteScalarAsync<T>() Declaration public Task<T> ExecuteScalarAsync<T>() Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source InsertInBulkAsync<T>(IEnumerable<T>, String, Int32, Dictionary<String, String>) Declaration public Task InsertInBulkAsync<T>(IEnumerable<T> data, string tableName, int timeoutInSeconds, Dictionary<string, string> columnMappings) Parameters Type Name Description IEnumerable <T> data String tableName Int32 timeoutInSeconds Dictionary < String , String > columnMappings Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source Query<T>() Declaration public IEnumerable<T> Query<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source QueryAsync<T>() Declaration public Task<IEnumerable<T>> QueryAsync<T>() Returns Type Description Task < IEnumerable <T>> Type Parameters Name Description T | Improve this Doc View Source QueryAsync<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TReturn | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TThird TReturn | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TThird TFourth TReturn | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TThird TFourth TFifth TReturn | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TThird TFourth TFifth TSixth TReturn | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>) Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping) Parameters Type Name Description Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst TSecond TThird TFourth TFifth TSixth TSeventh TReturn | Improve this Doc View Source QueryFirstOrDefault<T>() Declaration public T QueryFirstOrDefault<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source QueryFirstOrDefaultAsync<T>() Declaration public Task<T> QueryFirstOrDefaultAsync<T>() Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source QuerySingleOrDefault<T>() Declaration public T QuerySingleOrDefault<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source QuerySingleOrDefaultAsync<T>() Declaration public Task<T> QuerySingleOrDefaultAsync<T>() Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source UpdateConfig(QueryConfiguration) Declaration public void UpdateConfig(QueryConfiguration config) Parameters Type Name Description QueryConfiguration config Implements IUpdatableQueryExecutor IQueryExecutor IBulkQueryExecutor"
  },
  "api/Gossip.Connection.Fluent.QueryExecutorProvider.html": {
    "href": "api/Gossip.Connection.Fluent.QueryExecutorProvider.html",
    "title": "Class QueryExecutorProvider | Gossip",
    "keywords": "Class QueryExecutorProvider Provides various query executors. Inheritance Object QueryExecutorProvider Implements IQueryExecutorProvider Namespace : Gossip.Connection.Fluent Assembly : Gossip.dll Syntax public class QueryExecutorProvider : object, IQueryExecutorProvider Constructors | Improve this Doc View Source QueryExecutorProvider(IPluginManager, IExecutionStrategy) Declaration public QueryExecutorProvider(IPluginManager pluginManager, IExecutionStrategy executionStrategy) Parameters Type Name Description IPluginManager pluginManager IExecutionStrategy executionStrategy Methods | Improve this Doc View Source GetBulkQueryExecutor(ISqlConnection, QueryConfiguration, FunctionMetadata) Declaration public IBulkQueryExecutor GetBulkQueryExecutor(ISqlConnection conn, QueryConfiguration config, FunctionMetadata metadata) Parameters Type Name Description ISqlConnection conn QueryConfiguration config FunctionMetadata metadata Returns Type Description IBulkQueryExecutor | Improve this Doc View Source GetQueryExecutor(ISqlConnection, QueryConfiguration, FunctionMetadata) Declaration public IQueryExecutor GetQueryExecutor(ISqlConnection conn, QueryConfiguration config, FunctionMetadata metadata) Parameters Type Name Description ISqlConnection conn QueryConfiguration config FunctionMetadata metadata Returns Type Description IQueryExecutor Implements IQueryExecutorProvider"
  },
  "api/Gossip.Connection.html": {
    "href": "api/Gossip.Connection.html",
    "title": "Namespace Gossip.Connection | Gossip",
    "keywords": "Namespace Gossip.Connection Classes ConnectionString Database connection string Database Configures a database connection DatabaseConfiguration Database Configuration DatabaseConnection Database Connection DatabaseConnectionProvider Opens a connection to a database NoopExecutionStrategy Noop Execution Strategy SqlConnectionExtensions SQL connection extensions SqlConnectionWrapper SQL connection wrapper UsageDetails Interfaces IConnectionDetails Database connection details IConnectionString Database connection string IDatabaseConfigurator Configures a database connection IDatabaseConnection Database Connection IDatabaseConnectionProvider Opens a connection to a database ISqlConnectionFactory Creates connection to SQL databases"
  },
  "api/Gossip.Connection.IConnectionDetails.html": {
    "href": "api/Gossip.Connection.IConnectionDetails.html",
    "title": "Interface IConnectionDetails | Gossip",
    "keywords": "Interface IConnectionDetails Database connection details Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface IConnectionDetails Properties | Improve this Doc View Source Database Database name Declaration string Database { get; } Property Value Type Description String | Improve this Doc View Source Server Server name (e.g. localhost) Declaration string Server { get; } Property Value Type Description String"
  },
  "api/Gossip.Connection.IConnectionString.html": {
    "href": "api/Gossip.Connection.IConnectionString.html",
    "title": "Interface IConnectionString | Gossip",
    "keywords": "Interface IConnectionString Database connection string Inherited Members IConnectionDetails.Server IConnectionDetails.Database Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface IConnectionString : IConnectionDetails Properties | Improve this Doc View Source Credentials Credentials for accessing the database Declaration SqlCredential Credentials { get; } Property Value Type Description SqlCredential | Improve this Doc View Source Value Database connection string Declaration string Value { get; } Property Value Type Description String"
  },
  "api/Gossip.Connection.IDatabaseConfigurator.html": {
    "href": "api/Gossip.Connection.IDatabaseConfigurator.html",
    "title": "Interface IDatabaseConfigurator | Gossip",
    "keywords": "Interface IDatabaseConfigurator Configures a database connection Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface IDatabaseConfigurator Methods | Improve this Doc View Source Build() Builds the database connection Declaration IDatabaseConnectionProvider Build() Returns Type Description IDatabaseConnectionProvider IDatabaseConfigurator | Improve this Doc View Source WithCommandTimeout(Int32) Time in ms that the connection will wait for a command to execute Declaration IDatabaseConfigurator WithCommandTimeout(int timeoutInSeconds) Parameters Type Name Description Int32 timeoutInSeconds Timeout (in seconds) Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithConnectionString(Func<IConnectionString>) Adds a connection string to the database connection Declaration IDatabaseConfigurator WithConnectionString(Func<IConnectionString> connectionString) Parameters Type Name Description Func < IConnectionString > connectionString Database connection string Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithConnectionString(Func<Task<IConnectionString>>) Builds a connection string to configure a database connection Declaration IDatabaseConfigurator WithConnectionString(Func<Task<IConnectionString>> connectionString) Parameters Type Name Description Func < Task < IConnectionString >> connectionString Database Connection String Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithExecutionStrategy(IExecutionStrategy) Adds an execution strategy to the database connection Declaration IDatabaseConfigurator WithExecutionStrategy(IExecutionStrategy executionStrategy) Parameters Type Name Description IExecutionStrategy executionStrategy Execution strategy Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithFallbacks(IEnumerable<Func<Task<IConnectionString>>>) Adds fallbacks to the database connection Declaration IDatabaseConfigurator WithFallbacks(IEnumerable<Func<Task<IConnectionString>>> fallbacks) Parameters Type Name Description IEnumerable < Func < Task < IConnectionString >>> fallbacks Connection fallbacks Returns Type Description IDatabaseConfigurator IDatabaseConfigurator | Improve this Doc View Source WithMonitoring(TimeSpan, CancellationToken) Get insight into the state of the library. See what databases are in line to be used. Declaration IDatabaseConfigurator WithMonitoring(TimeSpan interval, CancellationToken cancellationToken = null) Parameters Type Name Description TimeSpan interval The frequency for the monitor to run CancellationToken cancellationToken Cancellation token Returns Type Description IDatabaseConfigurator | Improve this Doc View Source WithPlugin<T>(Func<T>) Add a plugin by providing a factory that will be used to instantiate the plugin every call to the database. Declaration IDatabaseConfigurator WithPlugin<T>(Func<T> pluginFactory) where T : IDatabasePlugin Parameters Type Name Description Func <T> pluginFactory The plugin to add. Returns Type Description IDatabaseConfigurator IDatabaseConfigurator Type Parameters Name Description T"
  },
  "api/Gossip.Connection.IDatabaseConnection.html": {
    "href": "api/Gossip.Connection.IDatabaseConnection.html",
    "title": "Interface IDatabaseConnection | Gossip",
    "keywords": "Interface IDatabaseConnection Database Connection Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface IDatabaseConnection : IDisposable Methods | Improve this Doc View Source BeginTransaction() Begin a transaction. Declaration ITransaction BeginTransaction() Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel) Begin a transaction with a specified . Declaration ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The of the transaction. Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel, String) Begin a named transaction with a specified . Declaration ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel, string transactionName) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The of the transaction. String transactionName The transaction name. Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(String) Begin a named transaction. Declaration ITransaction BeginTransaction(string transactionName) Parameters Type Name Description String transactionName The transaction name. Returns Type Description ITransaction | Improve this Doc View Source Configure(String, String) Configures the database Declaration IQueryConfigurator Configure(string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description IQueryConfigurator IQueryConfigurator | Improve this Doc View Source EnlistTransaction(Transaction) Enlist a transaction Declaration void EnlistTransaction(Transaction transaction) Parameters Type Name Description Transaction transaction transaction | Improve this Doc View Source Execute(String, Object, String, String) Execute parameterized SQL. Declaration int Execute(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Int32 The number of rows affected. | Improve this Doc View Source ExecuteAsync(String, Object, String, String) Execute parameterized SQL. Declaration Task<int> ExecuteAsync(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql SQL query to run Object param Parameters to pass into the SQL query String callerMemberName Caller name String callerFilePath Caller location Returns Type Description Task < Int32 > Integer number of rows affected | Improve this Doc View Source Query<T>(String, Object, String, String) Execute parameterized sql Declaration IEnumerable<T> Query<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description IEnumerable <T> Result of the sql query, a collection of type T Type Parameters Name Description T generic type | Improve this Doc View Source QueryAsync<T>(String, Object, String, String) Execute parameterized SQL. Declaration Task<IEnumerable<T>> QueryAsync<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql SQL query to run Object param Parameters to pass into the SQL query String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task < IEnumerable <T>> SQL query result Type Parameters Name Description T Generic return type | Improve this Doc View Source QueryFirstOrDefaultAsync<T>(String, Object, String, String) Executes Parameterized SQL Declaration Task<T> QueryFirstOrDefaultAsync<T>(string sql, object param = null, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. Object param The parameters to use for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task <T> The first result of the sql query Type Parameters Name Description T Generic Type | Improve this Doc View Source QuerySingleOrDefault<T>(String, String, String) Executes SQL Declaration T QuerySingleOrDefault<T>(string sql, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description T The first result of the sql query Type Parameters Name Description T Generic Type | Improve this Doc View Source QuerySingleOrDefaultAsync<T>(String, String, String) Execute sql Declaration Task<T> QuerySingleOrDefaultAsync<T>(string sql, string callerMemberName = \"\", string callerFilePath = \"\") Parameters Type Name Description String sql The SQL to execute for this query. String callerMemberName (internal use) for logging String callerFilePath (internal use) for logging Returns Type Description Task <T> Result of the sql query, a collection of type T Type Parameters Name Description T generic type"
  },
  "api/Gossip.Connection.IDatabaseConnectionProvider.html": {
    "href": "api/Gossip.Connection.IDatabaseConnectionProvider.html",
    "title": "Interface IDatabaseConnectionProvider | Gossip",
    "keywords": "Interface IDatabaseConnectionProvider Opens a connection to a database Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface IDatabaseConnectionProvider Methods | Improve this Doc View Source OpenAsync() Opens an async connection to a database. Declaration Task<IDatabaseConnection> OpenAsync() Returns Type Description Task < IDatabaseConnection > IDatabaseConnection | Improve this Doc View Source OpenAsync(CancellationToken) Opens an async connection to a database. Declaration Task<IDatabaseConnection> OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token Returns Type Description Task < IDatabaseConnection > IDatabaseConnection"
  },
  "api/Gossip.Connection.ISqlConnectionFactory.html": {
    "href": "api/Gossip.Connection.ISqlConnectionFactory.html",
    "title": "Interface ISqlConnectionFactory | Gossip",
    "keywords": "Interface ISqlConnectionFactory Creates connection to SQL databases Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public interface ISqlConnectionFactory Methods | Improve this Doc View Source Create(IConnectionString) Create a database connection for a sql database Declaration ISqlConnection Create(IConnectionString connectionString) Parameters Type Name Description IConnectionString connectionString Connection string Returns Type Description ISqlConnection Database connection | Improve this Doc View Source GetConnectionStringBuilder() Gets a connection string builder Declaration IConnectionStringBuilder GetConnectionStringBuilder() Returns Type Description IConnectionStringBuilder Connection string builder"
  },
  "api/Gossip.Connection.NoopExecutionStrategy.html": {
    "href": "api/Gossip.Connection.NoopExecutionStrategy.html",
    "title": "Class NoopExecutionStrategy | Gossip",
    "keywords": "Class NoopExecutionStrategy Noop Execution Strategy Inheritance Object NoopExecutionStrategy Implements IExecutionStrategy Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class NoopExecutionStrategy : object, IExecutionStrategy Methods | Improve this Doc View Source Execute(Action) Execution Strategy Declaration public void Execute(Action fn) Parameters Type Name Description Action fn Execution Strategy | Improve this Doc View Source Execute<T>(Func<T>) Execution Strategy Declaration public T Execute<T>(Func<T> fn) Parameters Type Name Description Func <T> fn Execution Strategy Returns Type Description T Generic Type T Type Parameters Name Description T Generic Type T | Improve this Doc View Source ExecuteAsync(Func<Task>) Execution Strategy Declaration public Task ExecuteAsync(Func<Task> fn) Parameters Type Name Description Func < Task > fn Execution Strategy Returns Type Description Task Task | Improve this Doc View Source ExecuteAsync<T>(Func<Task<T>>) Execution Strategy Declaration public Task<T> ExecuteAsync<T>(Func<Task<T>> fn) Parameters Type Name Description Func < Task <T>> fn Execution strategy Returns Type Description Task <T> Task with generic type T Type Parameters Name Description T Generic Type Implements IExecutionStrategy"
  },
  "api/Gossip.Connection.SqlConnectionExtensions.html": {
    "href": "api/Gossip.Connection.SqlConnectionExtensions.html",
    "title": "Class SqlConnectionExtensions | Gossip",
    "keywords": "Class SqlConnectionExtensions SQL connection extensions Inheritance Object SqlConnectionExtensions Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public static class SqlConnectionExtensions : object Methods | Improve this Doc View Source BulkInsert<T>(SqlConnection, String, IEnumerable<T>, Int32, Action<Object, SqlRowsCopiedEventArgs>, Int32, Dictionary<String, String>, Int32) This uses reflection to get the properties of your object. Then transforms your objects into a DataTable Then uses SqlBulkCopy to put it into SQL Declaration public static void BulkInsert<T>(this SqlConnection connection, string insertIntoTable, IEnumerable<T> data, int batchSize = 1000, Action<object, SqlRowsCopiedEventArgs> notifyCallback = null, int notifyAfter = 10000, Dictionary<string, string> columnMapping = null, int timeoutSeconds = 30) Parameters Type Name Description SqlConnection connection Connection String insertIntoTable Table IEnumerable <T> data Currently this method is stupid, the type's properties should match the database table columns, if not use the column mapping dictionary Int32 batchSize Batch size Action < Object , SqlRowsCopiedEventArgs > notifyCallback Callback Int32 notifyAfter Notify Dictionary < String , String > columnMapping Manual mapping of object property names to database column names Int32 timeoutSeconds Timeout the queries after Type Parameters Name Description T Generic Type | Improve this Doc View Source BulkInsertAsync<T>(SqlConnection, String, IEnumerable<T>, Int32, Action<Object, SqlRowsCopiedEventArgs>, Int32, Dictionary<String, String>, Int32) This uses reflection to get the properties of your object. Then transforms your objects into a DataTable Then uses SqlBulkCopy to put it into SQL Declaration public static Task BulkInsertAsync<T>(this SqlConnection connection, string insertIntoTable, IEnumerable<T> data, int batchSize = 1000, Action<object, SqlRowsCopiedEventArgs> notifyCallback = null, int notifyAfter = 10000, Dictionary<string, string> columnMapping = null, int timeoutSeconds = 30) Parameters Type Name Description SqlConnection connection Connection String insertIntoTable Table IEnumerable <T> data Currently this method is stupid, the type's properties should match the database table columns, if not use the column mapping dictionary Int32 batchSize Batch Size Action < Object , SqlRowsCopiedEventArgs > notifyCallback Callback Function Int32 notifyAfter Notify Dictionary < String , String > columnMapping Manual mapping of object property names to database column names Int32 timeoutSeconds Timeout the queries after Returns Type Description Task Type Parameters Name Description T Generic Type"
  },
  "api/Gossip.Connection.SqlConnectionWrapper.html": {
    "href": "api/Gossip.Connection.SqlConnectionWrapper.html",
    "title": "Class SqlConnectionWrapper | Gossip",
    "keywords": "Class SqlConnectionWrapper SQL connection wrapper Inheritance Object SqlConnectionWrapper Implements ISqlConnection IDisposable Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class SqlConnectionWrapper : object, ISqlConnection, IDisposable Constructors | Improve this Doc View Source SqlConnectionWrapper(IConnectionString) SQL connection wrapper constructor Declaration public SqlConnectionWrapper(IConnectionString connectionString) Parameters Type Name Description IConnectionString connectionString Database connection string Methods | Improve this Doc View Source BeginTransaction() Declaration public ITransaction BeginTransaction() Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel) Declaration public ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(System.Data.IsolationLevel, String) Declaration public ITransaction BeginTransaction(System.Data.IsolationLevel isolationLevel, string transactionName) Parameters Type Name Description System.Data.IsolationLevel isolationLevel String transactionName Returns Type Description ITransaction | Improve this Doc View Source BeginTransaction(String) Declaration public ITransaction BeginTransaction(string transactionName) Parameters Type Name Description String transactionName Returns Type Description ITransaction | Improve this Doc View Source BulkInsertAsync<T>(String, IEnumerable<T>, Int32, Action<Object, SqlRowsCopiedEventArgs>, Int32, Dictionary<String, String>, Int32) Bulk insert data into a table. Declaration public Task BulkInsertAsync<T>(string insertIntoTable, IEnumerable<T> data, int batchSize = 1000, Action<object, SqlRowsCopiedEventArgs> notifyCallback = null, int notifyAfter = 10000, Dictionary<string, string> columnMapping = null, int timeoutSeconds = 30) Parameters Type Name Description String insertIntoTable The name of the table. IEnumerable <T> data The data to insert. Int32 batchSize The size of the batches for bulk insert. Action < Object , SqlRowsCopiedEventArgs > notifyCallback A callback to pass to . Int32 notifyAfter Occurs after each batch has been processed. Dictionary < String , String > columnMapping A dictionary of column mappings. Int32 timeoutSeconds The timeout, specified in seconds. Returns Type Description Task Type Parameters Name Description T The type of data being bulk inserted. | Improve this Doc View Source Close() Synchronously close the SQL connection. Declaration public void Close() | Improve this Doc View Source CreateCommandDefinition(String, Object, Nullable<Int32>, CancellationToken, IDbTransaction) Creates Command Definition Declaration public CommandDefinition CreateCommandDefinition(string query, object parameters, int? commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query SQL command Object parameters Parameters to pass into SQL command Nullable < Int32 > commandTimeout SQL command timeout CancellationToken cancellationToken cancellation token IDbTransaction transaction The transaction Returns Type Description CommandDefinition Command Definition | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source EnlistTransaction(Transaction) Enlist the given transaction. Declaration public void EnlistTransaction(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to enlist. | Improve this Doc View Source Execute(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously execute the query. Declaration public int Execute(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. IDbTransaction transaction The transaction to use for this query. Returns Type Description Int32 The number of rows impacted by the query. | Improve this Doc View Source ExecuteAsync(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously execute the query. Declaration public Task<int> ExecuteAsync(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < Int32 > The number of rows impacted by the query. | Improve this Doc View Source ExecuteScalar<T>(String, Object, Int32, IDbTransaction) Declaration public T ExecuteScalar<T>(string query, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query Object parameters Int32 commandTimeout IDbTransaction transaction Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ExecuteScalarAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Declaration public Task<T> ExecuteScalarAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query Object parameters Int32 commandTimeout CancellationToken cancellationToken IDbTransaction transaction Returns Type Description Task <T> Type Parameters Name Description T | Improve this Doc View Source GetConnectionDetails() Get the connection details such as the server and database name. Declaration public IConnectionDetails GetConnectionDetails() Returns Type Description IConnectionDetails The IConnectionDetails . | Improve this Doc View Source GetSqlConnection() Gets sql connection Declaration public SqlConnection GetSqlConnection() Returns Type Description SqlConnection SqlConnection | Improve this Doc View Source Open() Synchronously open the SQL connection. Declaration public void Open() | Improve this Doc View Source OpenAsync(CancellationToken) Asynchronously open the SQL connection. Declaration public Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken A cancellation token for cooperatively cancelling the operation. Returns Type Description Task | Improve this Doc View Source Query<T>(String, Object, Int32, Boolean, IDbTransaction) Synchronously execute the query and return the results. Declaration public IEnumerable<T> Query<T>(string query, object parameters, int commandTimeout, bool buffered, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. Boolean buffered Whether to buffer the results in memory or not. IDbTransaction transaction An for transactional functionality. Returns Type Description IEnumerable <T> The of results. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously execute the query and return the results. Declaration public Task<IEnumerable<T>> QueryAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task < IEnumerable <T>> The of results. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TReturn>(String, Func<TFirst, TSecond, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 2 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(string query, Func<TFirst, TSecond, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TReturn>(String, Func<TFirst, TSecond, TThird, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 3 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(string query, Func<TFirst, TSecond, TThird, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 4 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 5 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 6 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> An enumerable of TReturn . Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(String, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>, Object, Int32, IDbTransaction) Perform a asynchronous multi-mapping query with 7 input types. This returns a single type, combined from the raw types via mapping . Declaration public Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(string query, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping, object parameters, int commandTimeout, IDbTransaction transaction) Parameters Type Name Description String query The SQL to execute for this query. Func <TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> mapping The function to map row types to the return type. Object parameters The parameters to use for this query. Int32 commandTimeout Number of seconds before command execution timeout. IDbTransaction transaction The transaction to use for this query. Returns Type Description Task < IEnumerable <TReturn>> Type Parameters Name Description TFirst The first type in the recordset. TSecond The second type in the recordset. TThird The third type in the recordset. TFourth The fourth type in the recordset. TFifth The fifth type in the recordset. TSixth The sixth type in the recordset. TSeventh The seventh type in the recordset. TReturn The combined type to return. | Improve this Doc View Source QueryFirstOrDefault<T>(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously query for the first result, or the default value of if no result is found. Declaration public T QueryFirstOrDefault<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description T The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QueryFirstOrDefaultAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously query for the first result, or the default value of if no result is found. Declaration public Task<T> QueryFirstOrDefaultAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task <T> The first result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QuerySingleOrDefault<T>(String, Object, Int32, CancellationToken, IDbTransaction) Synchronously query for a single result, or the default value of if no result is found. Declaration public T QuerySingleOrDefault<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description T The result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. | Improve this Doc View Source QuerySingleOrDefaultAsync<T>(String, Object, Int32, CancellationToken, IDbTransaction) Asynchronously query for a single result, or the default value of if no result is found. Declaration public Task<T> QuerySingleOrDefaultAsync<T>(string query, object parameters, int commandTimeout, CancellationToken cancellationToken, IDbTransaction transaction) Parameters Type Name Description String query The query to execute. Object parameters The parameters for the query. Int32 commandTimeout The effective timeout for the command. CancellationToken cancellationToken A cancellation token to cooperatively cancel the operation. IDbTransaction transaction An for transactional functionality. Returns Type Description Task <T> The result of the query, or the default value of if no result is found. Type Parameters Name Description T The type of results to return. Implements ISqlConnection IDisposable"
  },
  "api/Gossip.Connection.UsageDetails.html": {
    "href": "api/Gossip.Connection.UsageDetails.html",
    "title": "Class UsageDetails | Gossip",
    "keywords": "Class UsageDetails Inheritance Object UsageDetails Namespace : Gossip.Connection Assembly : Gossip.dll Syntax public class UsageDetails : object Constructors | Improve this Doc View Source UsageDetails(Assembly) Declaration public UsageDetails(Assembly assembly) Parameters Type Name Description Assembly assembly Properties | Improve this Doc View Source LibraryName Declaration public string LibraryName { get; } Property Value Type Description String | Improve this Doc View Source LibraryVersion Declaration public Version LibraryVersion { get; } Property Value Type Description Version"
  },
  "api/Gossip.ConnectionStrings.ConnectionStringSettings.html": {
    "href": "api/Gossip.ConnectionStrings.ConnectionStringSettings.html",
    "title": "Class ConnectionStringSettings | Gossip",
    "keywords": "Class ConnectionStringSettings Database connection string settings Inheritance Object ConnectionStringSettings Implements IConnectionStringSettings Namespace : Gossip.ConnectionStrings Assembly : Gossip.dll Syntax public class ConnectionStringSettings : object, IConnectionStringSettings Properties | Improve this Doc View Source ApplicationName Name of the application that is connecting to the database Declaration public string ApplicationName { get; set; } Property Value Type Description String | Improve this Doc View Source ConnectRetryCount The number of reconnections attempted after identifying that there was an idle connection failure. This must be an integer between 0 and 255. Default is 1. Set to 0 to disable reconnecting on idle connection failures. An ArgumentException will be thrown if set to a value outside of the allowed range. Declaration public int ConnectRetryCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ConnectRetryInterval Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure. This must be an integer between 1 and 60. The default is 10 seconds. An ArgumentException will be thrown if set to a value outside of the allowed range. Declaration public int ConnectRetryInterval { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Database The database name Declaration public string Database { get; set; } Property Value Type Description String | Improve this Doc View Source DefaultCommandTimeout The time in seconds that the connection will wait for a command to execute Declaration public int DefaultCommandTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source LoadBalanceTimeout Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed. Declaration public int LoadBalanceTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MachineName Name of the machine that is connecting to the database Declaration public string MachineName { get; set; } Property Value Type Description String | Improve this Doc View Source MaxPoolSize The max number of database connection objects for the database connection string Declaration public int MaxPoolSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MultiSubnetFailover If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server. Declaration public bool MultiSubnetFailover { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Password Database connection password Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Server The database server name (e.g. localhost) Declaration public string Server { get; set; } Property Value Type Description String | Improve this Doc View Source UseIntegratedSecurity Use Windows Authentication to connect to the database server. Declaration public bool UseIntegratedSecurity { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Username Username of user/application that is connecting to the database Declaration public string Username { get; set; } Property Value Type Description String Implements IConnectionStringSettings"
  },
  "api/Gossip.ConnectionStrings.html": {
    "href": "api/Gossip.ConnectionStrings.html",
    "title": "Namespace Gossip.ConnectionStrings | Gossip",
    "keywords": "Namespace Gossip.ConnectionStrings Classes ConnectionStringSettings Database connection string settings MsSqlConnectionStringBuilder Builds a MsSql connection string Interfaces IConnectionStringBuilder Builds the database connection string IConnectionStringProvider Connection String Provider IConnectionStringSettings Connection String Settings"
  },
  "api/Gossip.ConnectionStrings.IConnectionStringBuilder.html": {
    "href": "api/Gossip.ConnectionStrings.IConnectionStringBuilder.html",
    "title": "Interface IConnectionStringBuilder | Gossip",
    "keywords": "Interface IConnectionStringBuilder Builds the database connection string Namespace : Gossip.ConnectionStrings Assembly : Gossip.dll Syntax public interface IConnectionStringBuilder Methods | Improve this Doc View Source Build(IConnectionStringSettings) Builds the database connection string Declaration string Build(IConnectionStringSettings settings) Parameters Type Name Description IConnectionStringSettings settings Database connection settings Returns Type Description String Database connection string"
  },
  "api/Gossip.ConnectionStrings.IConnectionStringProvider.html": {
    "href": "api/Gossip.ConnectionStrings.IConnectionStringProvider.html",
    "title": "Interface IConnectionStringProvider | Gossip",
    "keywords": "Interface IConnectionStringProvider Connection String Provider Namespace : Gossip.ConnectionStrings Assembly : Gossip.dll Syntax public interface IConnectionStringProvider Methods | Improve this Doc View Source GetAsync() Gets a connection string Declaration Task<IConnectionString> GetAsync() Returns Type Description Task < IConnectionString > IConnectionString"
  },
  "api/Gossip.ConnectionStrings.IConnectionStringSettings.html": {
    "href": "api/Gossip.ConnectionStrings.IConnectionStringSettings.html",
    "title": "Interface IConnectionStringSettings | Gossip",
    "keywords": "Interface IConnectionStringSettings Connection String Settings Namespace : Gossip.ConnectionStrings Assembly : Gossip.dll Syntax public interface IConnectionStringSettings Properties | Improve this Doc View Source ApplicationName Name of the application that is connecting to the database Declaration string ApplicationName { get; } Property Value Type Description String | Improve this Doc View Source ConnectRetryCount The number of reconnections attempted after identifying that there was an idle connection failure. This must be an integer between 0 and 255. Default is 1. Set to 0 to disable reconnecting on idle connection failures. An ArgumentException will be thrown if set to a value outside of the allowed range. Declaration int ConnectRetryCount { get; } Property Value Type Description Int32 | Improve this Doc View Source ConnectRetryInterval Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure. This must be an integer between 1 and 60. The default is 10 seconds. An ArgumentException will be thrown if set to a value outside of the allowed range. Declaration int ConnectRetryInterval { get; } Property Value Type Description Int32 | Improve this Doc View Source Database The database name Declaration string Database { get; } Property Value Type Description String | Improve this Doc View Source DefaultCommandTimeout The time in seconds that the connection will wait for a command to execute Declaration int DefaultCommandTimeout { get; } Property Value Type Description Int32 | Improve this Doc View Source LoadBalanceTimeout Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed. Declaration int LoadBalanceTimeout { get; } Property Value Type Description Int32 | Improve this Doc View Source MachineName Name of the machine that is connecting to the database Declaration string MachineName { get; } Property Value Type Description String | Improve this Doc View Source MaxPoolSize The max number of database connection objects for the database connection string Declaration int MaxPoolSize { get; } Property Value Type Description Int32 | Improve this Doc View Source MultiSubnetFailover If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server. Declaration bool MultiSubnetFailover { get; } Property Value Type Description Boolean | Improve this Doc View Source Password Database connection password Declaration string Password { get; } Property Value Type Description String | Improve this Doc View Source Server The database server name (e.g. localhost) Declaration string Server { get; } Property Value Type Description String | Improve this Doc View Source UseIntegratedSecurity Use Windows Authentication to connect to the database server. Declaration bool UseIntegratedSecurity { get; } Property Value Type Description Boolean | Improve this Doc View Source Username Username of user/application that is connecting to the database Declaration string Username { get; } Property Value Type Description String"
  },
  "api/Gossip.ConnectionStrings.MsSqlConnectionStringBuilder.html": {
    "href": "api/Gossip.ConnectionStrings.MsSqlConnectionStringBuilder.html",
    "title": "Class MsSqlConnectionStringBuilder | Gossip",
    "keywords": "Class MsSqlConnectionStringBuilder Builds a MsSql connection string Inheritance Object MsSqlConnectionStringBuilder Implements IConnectionStringBuilder Namespace : Gossip.ConnectionStrings Assembly : Gossip.dll Syntax public class MsSqlConnectionStringBuilder : object, IConnectionStringBuilder Methods | Improve this Doc View Source Build(IConnectionStringSettings) Builds the database connection string Declaration public string Build(IConnectionStringSettings settings) Parameters Type Name Description IConnectionStringSettings settings Database connection settings Returns Type Description String Database connection string Implements IConnectionStringBuilder"
  },
  "api/Gossip.Containers.html": {
    "href": "api/Gossip.Containers.html",
    "title": "Namespace Gossip.Containers | Gossip",
    "keywords": "Namespace Gossip.Containers Interfaces IContext Context"
  },
  "api/Gossip.Containers.IContext.html": {
    "href": "api/Gossip.Containers.IContext.html",
    "title": "Interface IContext | Gossip",
    "keywords": "Interface IContext Context Namespace : Gossip.Containers Assembly : Gossip.dll Syntax public interface IContext : IDisposable Properties | Improve this Doc View Source ConnectionString Database Connection String Declaration string ConnectionString { get; } Property Value Type Description String Methods | Improve this Doc View Source SaveChanges() Save Changes Declaration int SaveChanges() Returns Type Description Int32 integer result"
  },
  "api/Gossip.Monitoring.html": {
    "href": "api/Gossip.Monitoring.html",
    "title": "Namespace Gossip.Monitoring | Gossip",
    "keywords": "Namespace Gossip.Monitoring Interfaces IDatabaseMonitorReport The monitor's report for the last interval"
  },
  "api/Gossip.Monitoring.IDatabaseMonitorReport.html": {
    "href": "api/Gossip.Monitoring.IDatabaseMonitorReport.html",
    "title": "Interface IDatabaseMonitorReport | Gossip",
    "keywords": "Interface IDatabaseMonitorReport The monitor's report for the last interval Namespace : Gossip.Monitoring Assembly : Gossip.dll Syntax public interface IDatabaseMonitorReport Properties | Improve this Doc View Source ConnectionDetails A list of potential connections, in order of priority. Declaration IEnumerable<IConnectionDetails> ConnectionDetails { get; } Property Value Type Description IEnumerable < IConnectionDetails >"
  },
  "api/Gossip.Plugins.html": {
    "href": "api/Gossip.Plugins.html",
    "title": "Namespace Gossip.Plugins | Gossip",
    "keywords": "Namespace Gossip.Plugins Classes NullPluginException PluginInstantiationException PluginManager Manages instantiation of plugins. Interfaces IDatabasePlugin Interface for database plugins. IPluginManager Manages instantiation of plugins."
  },
  "api/Gossip.Plugins.IDatabasePlugin.html": {
    "href": "api/Gossip.Plugins.IDatabasePlugin.html",
    "title": "Interface IDatabasePlugin | Gossip",
    "keywords": "Interface IDatabasePlugin Interface for database plugins. Namespace : Gossip.Plugins Assembly : Gossip.dll Syntax public interface IDatabasePlugin Methods | Improve this Doc View Source OnBuild(UsageDetails) Executes when DatabaseConnectionProvider is built. Declaration void OnBuild(UsageDetails usageDetails) Parameters Type Name Description UsageDetails usageDetails Library usage details | Improve this Doc View Source OnConnectionExceptionAsync(IConnectionDetails) Executes when database connection handles an exception during connection Declaration Task OnConnectionExceptionAsync(IConnectionDetails connectionDetails) Parameters Type Name Description IConnectionDetails connectionDetails Database connection details Returns Type Description Task | Improve this Doc View Source OnConnectionOpenAsync(IConnectionDetails, IExecutionDetails) Executes when database connection has finished opening Declaration Task OnConnectionOpenAsync(IConnectionDetails connectionDetails, IExecutionDetails executionDetails) Parameters Type Name Description IConnectionDetails connectionDetails Database connection details IExecutionDetails executionDetails Execution details providing information about the query Returns Type Description Task | Improve this Doc View Source OnConnectionOpeningAsync(IConnectionDetails) Executes when database connection is opening Declaration Task OnConnectionOpeningAsync(IConnectionDetails connectionDetails) Parameters Type Name Description IConnectionDetails connectionDetails Database connection details Returns Type Description Task | Improve this Doc View Source OnDatabaseMonitorExecutedAsync(IDatabaseMonitorReport) Executes when database monitor is executed. Declaration Task OnDatabaseMonitorExecutedAsync(IDatabaseMonitorReport databaseMonitorReport) Parameters Type Name Description IDatabaseMonitorReport databaseMonitorReport IDatabaseMonitorReport Returns Type Description Task | Improve this Doc View Source OnDatabaseResolutionExceptionAsync(String) Executes when database connection exception is resolved/handled Declaration Task OnDatabaseResolutionExceptionAsync(string database) Parameters Type Name Description String database Database name Returns Type Description Task | Improve this Doc View Source OnQueryExecutedAsync(IConnectionDetails, IExecutionDetails, FunctionMetadata) Executes when SQL query is complete Declaration Task OnQueryExecutedAsync(IConnectionDetails connectionDetails, IExecutionDetails executionDetails, FunctionMetadata metadata) Parameters Type Name Description IConnectionDetails connectionDetails Database connection details IExecutionDetails executionDetails Execution details providing information about the query FunctionMetadata metadata Metadata Returns Type Description Task | Improve this Doc View Source OnQueryExecutingAsync(IConnectionDetails, FunctionMetadata) Executes while SQL query is in progress Declaration Task OnQueryExecutingAsync(IConnectionDetails connectionDetails, FunctionMetadata metadata) Parameters Type Name Description IConnectionDetails connectionDetails Database connection details FunctionMetadata metadata Metadata Returns Type Description Task"
  },
  "api/Gossip.Plugins.IPluginManager.html": {
    "href": "api/Gossip.Plugins.IPluginManager.html",
    "title": "Interface IPluginManager | Gossip",
    "keywords": "Interface IPluginManager Manages instantiation of plugins. Namespace : Gossip.Plugins Assembly : Gossip.dll Syntax public interface IPluginManager Methods | Improve this Doc View Source AddPlugin<T>(Func<T>) Add a plugin to the manager. Declaration void AddPlugin<T>(Func<T> pluginFactory) where T : IDatabasePlugin Parameters Type Name Description Func <T> pluginFactory A function returning the plugin. Type Parameters Name Description T The type of plugin to add. | Improve this Doc View Source InstantiatePlugins() Instantiate the plugins that the manager is managing. Declaration IEnumerable<IDatabasePlugin> InstantiatePlugins() Returns Type Description IEnumerable < IDatabasePlugin > An of IDatabasePlugin ."
  },
  "api/Gossip.Plugins.NullPluginException.html": {
    "href": "api/Gossip.Plugins.NullPluginException.html",
    "title": "Class NullPluginException | Gossip",
    "keywords": "Class NullPluginException Inheritance Object NullPluginException Namespace : Gossip.Plugins Assembly : Gossip.dll Syntax public class NullPluginException : Exception Constructors | Improve this Doc View Source NullPluginException(Type) Declaration public NullPluginException(Type pluginType) Parameters Type Name Description Type pluginType Properties | Improve this Doc View Source PluginType Declaration public Type PluginType { get; } Property Value Type Description Type"
  },
  "api/Gossip.Plugins.PluginInstantiationException.html": {
    "href": "api/Gossip.Plugins.PluginInstantiationException.html",
    "title": "Class PluginInstantiationException | Gossip",
    "keywords": "Class PluginInstantiationException Inheritance Object PluginInstantiationException Namespace : Gossip.Plugins Assembly : Gossip.dll Syntax public class PluginInstantiationException : Exception Constructors | Improve this Doc View Source PluginInstantiationException(Type, Exception) Declaration public PluginInstantiationException(Type pluginType, Exception innerException) Parameters Type Name Description Type pluginType Exception innerException Properties | Improve this Doc View Source PluginType Declaration public Type PluginType { get; } Property Value Type Description Type"
  },
  "api/Gossip.Plugins.PluginManager.html": {
    "href": "api/Gossip.Plugins.PluginManager.html",
    "title": "Class PluginManager | Gossip",
    "keywords": "Class PluginManager Manages instantiation of plugins. Inheritance Object PluginManager Implements IPluginManager Namespace : Gossip.Plugins Assembly : Gossip.dll Syntax public class PluginManager : object, IPluginManager Constructors | Improve this Doc View Source PluginManager() Declaration public PluginManager() Methods | Improve this Doc View Source AddPlugin<T>(Func<T>) Declaration public void AddPlugin<T>(Func<T> pluginFactory) where T : IDatabasePlugin Parameters Type Name Description Func <T> pluginFactory Type Parameters Name Description T | Improve this Doc View Source InstantiatePlugins() Declaration public IEnumerable<IDatabasePlugin> InstantiatePlugins() Returns Type Description IEnumerable < IDatabasePlugin > Implements IPluginManager"
  },
  "api/Gossip.Strategies.html": {
    "href": "api/Gossip.Strategies.html",
    "title": "Namespace Gossip.Strategies | Gossip",
    "keywords": "Namespace Gossip.Strategies Interfaces IExecutionStrategy Execution Strategies"
  },
  "api/Gossip.Strategies.IExecutionStrategy.html": {
    "href": "api/Gossip.Strategies.IExecutionStrategy.html",
    "title": "Interface IExecutionStrategy | Gossip",
    "keywords": "Interface IExecutionStrategy Execution Strategies Namespace : Gossip.Strategies Assembly : Gossip.dll Syntax public interface IExecutionStrategy Methods | Improve this Doc View Source Execute(Action) Execution Strategy Declaration void Execute(Action fn) Parameters Type Name Description Action fn Execution Strategy | Improve this Doc View Source Execute<T>(Func<T>) Execution Strategy Declaration T Execute<T>(Func<T> fn) Parameters Type Name Description Func <T> fn Execution Strategy Returns Type Description T Generic Type T Type Parameters Name Description T Generic Type T | Improve this Doc View Source ExecuteAsync(Func<Task>) Execution Strategy Declaration Task ExecuteAsync(Func<Task> fn) Parameters Type Name Description Func < Task > fn Execution Strategy Returns Type Description Task Task | Improve this Doc View Source ExecuteAsync<T>(Func<Task<T>>) Execution Strategy Declaration Task<T> ExecuteAsync<T>(Func<Task<T>> fn) Parameters Type Name Description Func < Task <T>> fn Execution strategy Returns Type Description Task <T> Task with generic type T Type Parameters Name Description T Generic Type"
  },
  "api/Gossip.Transactions.html": {
    "href": "api/Gossip.Transactions.html",
    "title": "Namespace Gossip.Transactions | Gossip",
    "keywords": "Namespace Gossip.Transactions Classes NullTransaction A null transaction object. Interfaces ITransaction Represents a transaction."
  },
  "api/Gossip.Transactions.ITransaction.html": {
    "href": "api/Gossip.Transactions.ITransaction.html",
    "title": "Interface ITransaction | Gossip",
    "keywords": "Interface ITransaction Represents a transaction. Namespace : Gossip.Transactions Assembly : Gossip.dll Syntax public interface ITransaction : IDisposable Properties | Improve this Doc View Source Value The actual . Declaration IDbTransaction Value { get; } Property Value Type Description IDbTransaction Methods | Improve this Doc View Source Commit() Commit the transaction. Declaration void Commit() | Improve this Doc View Source Rollback() Rollback the transaction. Declaration void Rollback() | Improve this Doc View Source Rollback(String) Rollback the named transaction. Declaration void Rollback(string transactionName) Parameters Type Name Description String transactionName The transaction name."
  },
  "api/Gossip.Transactions.NullTransaction.html": {
    "href": "api/Gossip.Transactions.NullTransaction.html",
    "title": "Class NullTransaction | Gossip",
    "keywords": "Class NullTransaction A null transaction object. Inheritance Object NullTransaction Implements ITransaction IDisposable Namespace : Gossip.Transactions Assembly : Gossip.dll Syntax public class NullTransaction : object, ITransaction, IDisposable Properties | Improve this Doc View Source Value Declaration public IDbTransaction Value { get; } Property Value Type Description IDbTransaction Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback() | Improve this Doc View Source Rollback(String) Declaration public void Rollback(string transactionName) Parameters Type Name Description String transactionName Implements ITransaction IDisposable"
  },
  "api/Gossip.Utilities.CollectionExtensions.html": {
    "href": "api/Gossip.Utilities.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Gossip",
    "keywords": "Class CollectionExtensions Inheritance Object CollectionExtensions Namespace : Gossip.Utilities Assembly : Gossip.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source Batch<T>(IEnumerable<T>, Int32) Declaration public static IEnumerable<T[]> Batch<T>(this IEnumerable<T> collection, int batchSize) Parameters Type Name Description IEnumerable <T> collection Int32 batchSize Returns Type Description IEnumerable <T[]> Type Parameters Name Description T | Improve this Doc View Source BatchNoMultipleEnumeration<T>(IEnumerable<T>, Func<IList<T>, IEnumerable<T>>, Int32) Declaration public static IEnumerable<T> BatchNoMultipleEnumeration<T>(this IEnumerable<T> input, Func<IList<T>, IEnumerable<T>> function, int batchSize = 1000) Parameters Type Name Description IEnumerable <T> input Func < IList <T>, IEnumerable <T>> function Int32 batchSize Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Gossip.Utilities.EnumerableExtensions.html": {
    "href": "api/Gossip.Utilities.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Gossip",
    "keywords": "Class EnumerableExtensions Inheritance Object EnumerableExtensions Namespace : Gossip.Utilities Assembly : Gossip.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source ToJsonArray<T>(IEnumerable<T>) Declaration public static string ToJsonArray<T>(this IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items Returns Type Description String Type Parameters Name Description T"
  },
  "api/Gossip.Utilities.html": {
    "href": "api/Gossip.Utilities.html",
    "title": "Namespace Gossip.Utilities | Gossip",
    "keywords": "Namespace Gossip.Utilities Classes CollectionExtensions EnumerableExtensions"
  },
  "index.html": {
    "href": "index.html",
    "title": "Gossip Docs | Gossip",
    "keywords": "Gossip Docs Getting Started Connections Querying Batched Queries Transactions Plugins Execution Strategies Getting Started Configure and build a database connection. Database offers a number of build options, including adding plugins and/or execution strategies if desired. var _dbConnectionProvider = Database .Configure() .WithCommandTimeout(dataAccessConfiguration.DefaultSqlCommandTimeout) .WithConnectionString(() => { return new ConnectionString { Value = connectionString, Server = server, Database = database, }; }) .Build(); Connections Opening a connection asynchronously using (var conn = await _provider.OpenAsync(cancellationToken)) { var results = await conn.QueryAsync<T>(sql); } Opening a connection synchronously It is recommended that you use the asynchronous OpenAsync function. using (var conn = _provider.Open()) { var results = conn.Query<T>(sql); } Querying Async vs Sync Although the library supports synchronous functions, it is highly recommended that you use async in all instances. Simple queries For the absolute simplest queries, there are some quick and easy functions right on IDatabaseConnection . These are: await conn.QueryAsync<T>(sql); await conn.QueryAsync<T>(sql, params); await conn.QueryFirstOrDefaultAsync<T>(sql); await conn.QueryFirstOrDefaultAsync<T>(sql, params); await conn.QuerySingleOrDefaultAsync<T>(sql); await conn.QuerySingleOrDefaultAsync<T>(sql, params); await conn.ExecuteAsync(sql, params); Advanced queries If your queries are not super straightforward, you should use the conn.Configure() builder. This is where all of the useful functionality lives. For this most part, the functionality looks similar to the following example, except that you can use a variety of query types. await conn.Configure() .WithQuery(sql) .WithParameters(params) .Build() .QueryAsync<T>(); Batched queries This will batch large datasets into smaller queries that will be merged together so it appears that the query ran all at once. Currently the batch size is set to 10000. This is not currently configurable, but if you need it to be, please open an issue. using (var conn = _userDatabaseConnectionProvider.Open()) { return await conn.Configure() .WithQuery(GetUsersByNamesSql) .Build() .BatchedBy(names) .WithBatchParamAsJsonArray() .QueryAsync<DbUser>(); } How it works To batch a query, you need to do the following things: Specify a query that contains a @batchParam variable. This variable will be replaced with a subset of the records. Specify a dataset ( .BatchedBy(array) ) Use a batch parameter callback to tell the batching process how to convert the batched array into a variable to be processed. The most common usage of this is to convert the chunk into a JSON array. If this is what you want, you can use the .WithBatchParamAsJsonArray() method. Otherwise, use the .WithBatchParam(...) function to do the transformation. That's it! Just call one of the query executing functions to perform the query ( .QueryAync , ExecuteAsync , etc) Transactions TransactionScope Using TransactionScope allows database connections that are opened within the scope of the TransactionScope to automatically enlist in the scope. It is recommended to use this if you are using multi-database transactions. If you are using single-database transactions, use .BeginTransaction() . using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled)) { using (var conn = await db.OpenAsync()) { await conn.ExecuteAsync(\"INSERT INTO tblTest(Name) VALUES ('ABC')\"); } scope.Complete(); } This should cover 99.9% of use-cases, but if you opened a connection outside of a TransactionScope and want to manually enlist it, you can do: var conn = await db.OpenAsync(); using (var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled)) { conn.EnlistTransaction(System.Transaction.Current); await conn.ExecuteAsync(\"INSERT INTO tblTest(Name) VALUES ('ABC')\"); scope.Complete(); } BeginTransaction You can use .BeginTransaction() the same way that you would with SqlConnection . Check out the official documentation . An example: using (var conn = await db.OpenAsync()) { using (var tran = conn.BeginTransaction()) { try { await conn.ExecuteAsync(\"INSERT INTO tblTest(Name) VALUES ('ABC')\"); tran.Commit(); } catch (Exception ex) { tran.Rollback(); } } } Plugins Plugins allow users to handle events by implementing the IDatabasePlugin interface. Connection and query events expose metrics and metadata about these data access calls. Plugins can be used by providing a factory method to the connection configuration builder using .WithPlugin(...) . The IDatabasePlugin interfaces exposes a number of events: public interface IDatabasePlugin { void OnBuild(UsageDetails usageDetails); Task OnQueryExecutingAsync(IConnectionDetails connectionDetails, FunctionMetadata metadata); Task OnQueryExecutedAsync(IConnectionDetails connectionDetails, IExecutionDetails executionDetails, FunctionMetadata metadata); Task OnConnectionOpeningAsync(IConnectionDetails connectionDetails); Task OnConnectionOpenAsync(IConnectionDetails connectionDetails, IExecutionDetails executionDetails); Task OnConnectionExceptionAsync(IConnectionDetails connectionDetails); Task OnDatabaseResolutionExceptionAsync(string database); Task OnDatabaseMonitorExecutedAsync(IDatabaseMonitorReport databaseMonitorReport); } Execution strategies In addition to plugins, we also allow you to implement custom query execution strategies. For instance, you may use this feature to add a bulkhead policy so that you can limit the number of queries being run at a given time. var _dbConnectionProvider = Database .Configure() ... .WithExecutionStrategy(executionStrategy) ... .Build(); The interface for an execution strategy is the following: public interface IExecutionStrategy { Task<T> ExecuteAsync<T>(Func<Task<T>> fn); Task ExecuteAsync(Func<Task> fn); T Execute<T>(Func<T> fn); void Execute(Action fn); }"
  }
}